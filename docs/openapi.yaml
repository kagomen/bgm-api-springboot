openapi: 3.0.0
info:
  title: BGM API
  version: 1.0.0
  description: |
    - ★のついたエンドポイントは実装の優先度低
    - 🔓のついたエンドポイントはログインユーザーのみ使用可
      - その他のロール権限があるエンドポイントは【】内にその旨を記述

servers:
  - url: http://localhost:8080

paths:
  /update_user:
    patch:
      summary: ユーザー情報の変更
      tags: [user]
      description: |
        投稿者データ(userId)はJWTトークンからサーバ側で判別するため、リクエストボディには含めない
      security:
        - firebase: []
      x-roles:
        - USER
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: ユーザー名を変更しました

  /ban_user/{userId}:
    patch:
      summary: ユーザーのBAN（論理削除）【管理者のみ】★
      tags: [user]
      description: |
        アカウントBAN用
      security:
        - firebase: []
      x-roles:
        - ADMIN
      responses:
        "200":
          description: ユーザーをBANしました

  /get_bgm_list:
    get:
      summary: BGM一覧を取得(タグ検索)
      tags: [bgm]
      parameters:
        - name: tags
          in: query
          description: タグ検索用クエリ(小文字の英字のみ、複数の場合はカンマで区切る)
          required: false
          schema:
            type: array
            items:
              type: string
            example: ["rain", "cafe"]
          style: form
          explode: false # tags=rain,cafe とするのに必要な設定
      responses:
        "200":
          description: BGM一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BgmResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /get_bgm/{bgmId}:
    get:
      summary: 指定したBGMの情報を取得
      tags: [bgm]
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: BGMのデータを取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    $ref: "#/components/schemas/BgmResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /post_bgm:
    post:
      summary: BGMを投稿
      tags: [bgm]
      description: |
        投稿者データ(userId)はJWTトークンからサーバ側で判別するため、リクエストボディには含めない
      security:
        - firebase: []
      x-roles:
        - USER
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BgmRequest"
      responses:
        "201":
          description: BGMを投稿しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"

  /delete_bgm/{bgmId}:
    patch:
      summary: 指定したBGMを論理削除【投稿ユーザと管理者のみ】★
      tags: [bgm]
      security:
        - firebase: []
      x-roles:
        - OWNER
        - ADMIN
      parameters:
        - name: bgmId
          required: true
          in: path
          schema:
            type: integer
      responses:
        "204":
          description: 投稿を削除しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_tag_list:
    get:
      summary: 利用可能なタグ一覧を取得
      tags: [tag]
      responses:
        "200":
          description: タグ一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TagResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /add_tag/{bgmId}:
    post:
      summary: 指定したBGMにタグを追加
      tags: [tag]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagAddRequest"
      responses:
        "201":
          description: タグを追加しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /remove_tag/{bgmId}/{tagId}:
    delete:
      summary: 指定したBGMから指定したタグを物理削除
      description: タグは複数個同時に削除できない
      tags: [tag]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: タグを削除しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_bookmark_list:
    get:
      summary: ブックマーク一覧を取得(タグ検索)
      tags: [bookmark]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: tags
          in: query
          description: タグ検索用クエリ(小文字の英字のみ、複数の場合はカンマで区切る)
          required: false
          schema:
            type: array
            items:
              type: string
            example: ["rain", "cafe"]
          style: form
          explode: false
      responses:
        "200":
          description: ブックマーク一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BgmResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /add_bookmark/{bgmId}:
    post:
      summary: ブックマークに登録
      tags: [bookmark]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: ブックマークに追加しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /delete_bookmark/{bgmId}:
    delete:
      summary: ブックマークの物理削除
      tags: [bookmark]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: ブックマークを削除しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_report_list:
    get:
      summary: 違反報告一覧を取得【管理者のみ】★
      tags: [report]
      security:
        - firebase: []
      x-roles:
        - ADMIN
      responses:
        "200":
          description: 報告一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReportResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"

  /post_report:
    post:
      summary: 違反BGMを通報★
      tags: [report]
      security:
        - firebase: []
      x-roles:
        - USER
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        "201":
          description: 違反報告を送信しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

components:
  schemas:
    # ==================== リクエストボディ用のデータスキーマ ====================
    UserRequest:
      type: object
      required:
        - name:
      properties:
        name:
          type: string
          example: Kagome

    BgmRequest:
      type: object
      required:
        - title
        - url
      properties:
        title:
          type: string
          example: 雨の日のカフェのBGM
        url:
          type: string
          format: uri
          example: https://www.youtube.com/watch?v=pPN_t-oEjvI
        tags:
          type: array
          items:
            type: string
          example: ["rain", "cafe"]

    TagAddRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "happy"

    ReportRequest:
      type: object
      required:
        - bgmId
        - reason
      properties:
        bgmId:
          type: integer
          example: 123
        reason:
          type: string
          example: イタズラ投稿だと判断したため

    # ==================== レスポンスボディ用のデータスキーマ ====================

    BgmResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: 雨の日のカフェのBGM
        url:
          type: string
          format: uri
          example: https://www.youtube.com/watch?v=pPN_t-oEjvI
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
        userId:
          type: string
          example: 8
        createdAt:
          type: string
          format: date-time

    TagResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
      example:
        - id: 1
          title: "rain"
        - id: 2
          title: "cafe"

    ReportResponse:
      type: object
      properties:
        id:
          type: integer
          example: 4
        bgmId:
          type: integer
          example: 123
        userId:
          type: string
          example: 8
        reason:
          type: string
          example: イタズラ投稿だと判断したため
        createdAt:
          type: string
          format: date-time

  responses:
    # ==================== エラーレスポンス ====================

    BadRequestResponse:
      description: 不正なリクエストです
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 不正なリクエストです

    UnauthorizedResponse:
      description: 認証が必要です
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 認証が必要です

    ForbiddenResponse:
      description: 権限がありません
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 権限がありません

    NotFoundResponse:
      description: 該当リソースが存在しません
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 該当リソースが存在しません

    # ==================== 認証設定 ====================

  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT
