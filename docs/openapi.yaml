openapi: 3.0.0
info:
  title: BGM API
  version: 1.0.0
  description: |
    - ★のついたエンドポイントは実装の優先度低
    - 鍵アイコンのついたエンドポイントはログインユーザーのみ使用可
      - その他のロール権限があるエンドポイントは【】内にその旨を記述

servers:
  - url: http://localhost:8080

# TODO: GETの絞り込み条件を追記する
paths:
  /register_user:
    post:
      summary: ユーザー登録と内部IDの発行(初回ログイン時のみ)
      tags: [auth]
      description: |
        - ユーザーがFirebaseでログインした後、初回だけ呼び出される
        - ID Tokenを検証し、該当するユーザーが存在しなければUserテーブルにレコードを作成しIDを返却、存在すればIDだけ返却
          - 別端末の同Googleアカウントからのログインなどの可能性
        - 投稿者データ(userId)はJWTトークンからサーバ側で判別するため、リクエストボディには含めない
      security:
        - firebase: []
      x-roles:
        - USER
      responses:
        "200":
          description: ユーザーを確認しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_bgm_list:
    get:
      summary: BGM一覧を取得(タグ検索)
      description: 並び順は投稿日の新しい順。
      tags: [bgm]
      parameters:
        - name: tagList
          in: query
          description: タグ検索用クエリ(小文字の英字のみ、複数の場合はカンマで区切る)
          required: false
          schema:
            type: array
            items:
              type: string
            example: ["rain", "cafe"]
          style: form
          explode: false # tagList=rain,cafe とするのに必要な設定
        - name: page
          in: query
          description: ページ番号(1始まり)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: 1ページあたりの取得件数
          required: false
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: BGM一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bgmList:
                        type: array
                        items:
                          $ref: "#/components/schemas/BgmResponse"
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 30
                      totalItems:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 5
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /get_bgm_list/{userId}:
    get:
      summary: 指定したユーザーが投稿したBGM一覧を取得
      description: 並び順は投稿日の新しい順。
      tags: [bgm]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: ページ番号(1始まり)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: 1ページあたりの取得件数
          required: false
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: BGM一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bgmList:
                        type: array
                        items:
                          $ref: "#/components/schemas/BgmResponse"
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 30
                      totalItems:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 5
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_bgm/{bgmId}:
    get:
      summary: 指定したBGMの情報を取得
      tags: [bgm]
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: BGMのデータを取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bgm:
                        type: object
                        $ref: "#/components/schemas/BgmResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /post_bgm:
    post:
      summary: BGMを投稿
      tags: [bgm]
      description: |
        投稿者データ(userId)はJWTトークンからサーバ側で判別するため、リクエストボディには含めない
      security:
        - firebase: []
      x-roles:
        - USER
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BgmRequest"
      responses:
        "201":
          description: BGMを投稿しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"

  /delete_bgm/{bgmId}:
    patch:
      summary: 指定したBGMを論理削除【投稿ユーザと管理者のみ】★
      description: |
        BGMテーブルの該当レコードのisDeletedフラグをtrueにし、BGMのidと紐づくBgmTagテーブルのレコードを削除する（タグは全BGMで共通して使用するので、Tagテーブルのレコードはそのまま）。
      tags: [bgm]
      security:
        - firebase: []
      x-roles:
        - OWNER
        - ADMIN
      parameters:
        - name: bgmId
          required: true
          in: path
          schema:
            type: integer
      responses:
        "204":
          description: 投稿を削除しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_tag_list:
    get:
      summary: 利用可能なタグ一覧を取得
      description: 並び順はタグ登録日の新しい順。一度に取得する件数は30件。
      tags: [tag]
      parameters:
        - name: page
          in: query
          description: ページ番号(1始まり)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: 1ページあたりの取得件数
          required: false
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: タグ一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: object
                    properties:
                      tagList:
                        type: array
                        items:
                          $ref: "#/components/schemas/TagResponse"
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 30
                      totalItems:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 5
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /add_tag:
    post:
      summary: 指定したBGMにタグを追加
      tags: [tag]
      security:
        - firebase: []
      x-roles:
        - USER
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagAddRequest"
      responses:
        "201":
          description: タグを追加しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /remove_tag/{bgmId}/{tagId}:
    delete:
      summary: 指定したBGMから指定したタグを物理削除
      description: タグは複数個同時に削除できない
      tags: [tag]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: タグを削除しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_bookmark_list:
    get:
      summary: ブックマーク一覧を取得
      description: |
        並び順はブックマーク登録日の新しい順。一度に取得する件数は30件。
      tags: [bookmark]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: page
          in: query
          description: ページ番号(1始まり)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: 1ページあたりの取得件数
          required: false
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: ブックマーク一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: object
                    properties:
                      bookmarkList:
                        type: array
                        items:
                          $ref: "#/components/schemas/BgmResponse"
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 30
                      totalItems:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 5
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /add_bookmark/{bgmId}:
    post:
      summary: ブックマークに登録
      tags: [bookmark]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: ブックマークに追加しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /delete_bookmark/{bgmId}:
    delete:
      summary: ブックマークの物理削除
      tags: [bookmark]
      security:
        - firebase: []
      x-roles:
        - USER
      parameters:
        - name: bgmId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: ブックマークを削除しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /post_report:
    post:
      summary: 違反BGMを通報★
      tags: [report]
      security:
        - firebase: []
      x-roles:
        - USER
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportRequest"
      responses:
        "201":
          description: 違反報告を送信しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /get_report_list:
    get:
      summary: 違反報告一覧を取得【管理者のみ】★
      tags: [report]
      security:
        - firebase: []
      x-roles:
        - ADMIN
      parameters:
        - name: page
          in: query
          description: ページ番号(1始まり)
          required: false
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          description: 1ページあたりの取得件数
          required: false
          schema:
            type: integer
            default: 30
      responses:
        "200":
          description: 報告一覧を取得しました
          content:
            application/json:
              schema:
                type: object
                properties:
                  isSuccess:
                    type: boolean
                  data:
                    type: object
                    properties:
                      reportList:
                        type: array
                        items:
                          $ref: "#/components/schemas/ReportResponse"
                      page:
                        type: integer
                        example: 1
                      size:
                        type: integer
                        example: 30
                      totalItems:
                        type: integer
                        example: 150
                      totalPages:
                        type: integer
                        example: 5
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"

  /ban_user/{userId}:
    patch:
      summary: ユーザーの論理削除【管理者のみ】★
      tags: [report]
      description: |
        アカウントBAN用
      security:
        - firebase: []
      x-roles:
        - ADMIN
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ユーザーをBANしました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /add_handling_note:
    patch:
      summary: 違反報告への対応内容を記録する【管理者のみ】★
      tags: [report]
      security:
        - firebase: []
      x-roles:
        - ADMIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportHandlingRequest"
      responses:
        "201":
          description: 対応内容を記録しました
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

components:
  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ==================== リクエストボディ用のデータスキーマ ====================
    BgmRequest:
      type: object
      required:
        - title
        - url
      properties:
        title:
          type: string
          example: 雨の日のカフェのBGM
        url:
          type: string
          format: uri
          example: https://www.youtube.com/watch?v=pPN_t-oEjvI
        tagList:
          type: array
          items:
            type: string
          example: ["rain", "cafe"]

    ReportHandlingRequest:
      type: object
      required:
        - reportId
        - handlingNote
      properties:
        reportId:
          type: integer
          example: 4
        handlingNote:
          type: string
          example: 投稿が悪質なため、BGMを削除した

    ReportRequest:
      type: object
      required:
        - bgmId
        - reason
      properties:
        bgmId:
          type: integer
          example: 123
        reason:
          type: string
          example: イタズラ投稿だと判断したため

    TagAddRequest:
      type: object
      required:
        - bgmId
        - title
      properties:
        bgmId:
          type: integer
          example: 123
        title:
          type: string
          example: "happy"

    # ==================== レスポンスボディ用のデータスキーマ ====================

    BgmResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: 雨の日のカフェのBGM
        url:
          type: string
          format: uri
          example: https://www.youtube.com/watch?v=pPN_t-oEjvI
        tagList:
          type: array
          items:
            $ref: "#/components/schemas/TagResponse"
        userId:
          type: integer
          example: 8
        createdAt:
          type: string
          format: date-time

    ReportResponse:
      type: object
      properties:
        id:
          type: integer
          example: 4
        reporterId:
          type: string
          example: 8
        reason:
          type: string
          example: イタズラ投稿だと判断したため
        createdAt:
          type: string
          format: date-time
        bgmId:
          type: integer
          example: 123
        bgmAuthorId:
          type: integer
          example: 22
        handlingNote:
          type: string
          example: BGMを削除して対応。また、ユーザーの他の投稿は問題ないため、今回BANはせず。
        handledAt:
          type: string
          format: date-time
      

    TagResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "rain"

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 8

  # ==================== エラーレスポンス ====================
  responses:
    BadRequestResponse:
      description: 不正なリクエストです
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 不正なリクエストです

    UnauthorizedResponse:
      description: 認証が必要です
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 認証が必要です

    ForbiddenResponse:
      description: 権限がありません
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 権限がありません

    NotFoundResponse:
      description: 該当リソースが存在しません
      content:
        application/json:
          schema:
            type: object
            properties:
              isSuccess:
                type: boolean
                example: false
              message:
                type: string
                example: 該当リソースが存在しません
